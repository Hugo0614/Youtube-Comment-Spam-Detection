{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "3fd0ea7a-27db-412c-8e47-f5c0c2793288",
   "metadata": {},
   "source": [
    "# ***Youtube Comment Spam Detection - Report***"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2b93e5d9-eb4d-4a75-b056-2cdd824c159b",
   "metadata": {},
   "source": [
    "## **Name: Chau Ho San**\n",
    "## **EID: 57150406**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "23b138c6-ff05-4962-b701-be7b98be3ef4",
   "metadata": {},
   "source": [
    "### **Background** "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "46728ba5-8750-4550-8f1f-ae42c37f466f",
   "metadata": {},
   "source": [
    "The project revolves around the prevalent issue of spam comments on YouTube videos, which significantly diminishes the user experience and authenticity of content. These spam comments, often promotional or irrelevant in nature, inundate the comment sections, making it arduous for users to discover meaningful discussions or engage with content creators. This project aims to tackle this problem by developing a classifier capable of discerning between spam and genuine comments. The ultimate goal is to create a dependable tool that can effectively identify spam comments, thereby enhancing the quality of user interactions on YouTube and fostering a more positive and engaging online environment."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3cc42f00-7801-4b99-b74d-85c24f874189",
   "metadata": {},
   "source": [
    "### **Method**   "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5c0a7acf-8137-4902-adb8-8d584b8b5927",
   "metadata": {},
   "source": [
    "\n",
    "#### Model Architecture and Components\n",
    "\n",
    "In this project, the core of the methodology is based on the implementation of a **Long Short-Term Memory (LSTM) neural network**. I chose this model because it is exceptionally well-suited for processing sequential data, such as the text found in YouTube comments. Due to its ability, I can use it to capture temporal dependencies and contextual nuances within the data. The architecture of the LSTM model is meticulously designed and also can add several layers to the model which we need to optimize the model's performance:\n",
    "\n",
    "#### Detailed Description of Model Layers\n",
    "\n",
    "1. **Embedding Layer**:\n",
    "   - **Purpose**:This layer is used as an entry point for the input text data and transforms the text into a dense vector representation. Its main purpose is to transform sparse high-dimensional word indexes into a low-dimensional continuous vector space, thus enabling semantically similar words to be close to each other.\n",
    "   - **Details**. The vectors are learned during the training process and become more refined to reflect the nuances of the language used in YouTube comments.\n",
    "<br><br>\n",
    "2. **Batch Normalization Layer**:\n",
    "   - **Purpose**: Its main function is to stabilise the learning process by normalising the batch data, allowing higher learning rates and faster convergence. This layer adjusts the activation values of the embedding layer by normalising them to have a mean of zero and a variance of one, which helps to combat the problem of internal covariate bias.\n",
    "   - **Details**: By normalising the data, the model becomes less sensitive to the specific initialisation of the weights and can be trained more consistently and efficiently.\n",
    "<br><br>\n",
    "3. **LSTM Layer**:\n",
    "   - **Purpose**: This layer is the core of the model and it deals with sequences of embedded vectors. It specialises in capturing temporal dependencies and contextual relationships in text, which has very important implications for understanding the flow and intent of comments.\n",
    "   - **Capabilities**: LSTM is designed to remember information over long periods of time. As an example, if a comment is adding some spam text to normal content, LSTM can help distinguish between spam comments with cleverly inserted spam content. The layer uses gates to control the flow of information, maintaining memory of past important inputs while forgetting irrelevant data.\n",
    "<br><br>\n",
    "4. **Dropout Layer**:\n",
    "   - **Purpose**: This layer is designed to prevent the common overfitting problem encountered in deep learning models. By randomly disabling a portion of the neurons during the training phase, it forces the network to not rely on any one neuron, thus promoting more decentralised and robust feature learning.\n",
    "   - **Details**: Giving a proportion of randomness helps to enhance the generalisation of the model.s of the model.\n",
    "<br><br>\n",
    "5. **Dense Layer with Sigmoid Activation**:\n",
    "    -  **Purpose**: As the final layer of the model, it integrates the features learnt by the LSTM into a single output prediction. The output of this layer is mapped to a probability score between 0 and 1 using a sigmoid activation function, which represents the likelihood that the model will evaluate the text to determine whether it is spam or not after inputting a comment.t comment is spam.\n",
    "    - **Details**: When the task is binary classification (which is what this project is trying to achieve by determining whether the content of a YouTube comment is spam or non-spam), it consists of a single neuron. The output of the sigmoid function, on the other hand, is well suited for binary decision making, as it provides an explicit threshold of 0.5 to categorise the comments.\n",
    "<br><br>\n",
    "\n",
    "Each of the layers in this LSTM model plays an important role in dealing with the classification of complex textual data, especially when it comes to detecting spam in YouTube comments. Combining these layers allows the model to effectively learn from the data and make informed predictions about the nature of each comment.\n",
    "<br><br>\n",
    "#### Optimization and Training Enhancements\n",
    "\n",
    "- **Adam Optimizer**: The Adam Optimizer has an excellent adaptive learning rate feature, using which the learning rate can be adjusted throughout the training process. This feature is particularly beneficial in dealing with the complexity and non-stationarity of text data, ensuring faster and more efficient convergence.    \n",
    "\n",
    "- **Early Stop Mechanism**: An early stop callback function is integrated into the training process to monitor the model's performance on the validation set. If the performance does not improve within a predefined number of calendar hours, training is stopped. Using this approach not only helps prevent overfitting, but also saves computational resources by stopping training when the model reaches an optimal point during training."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e9c5be4d-4ed2-4971-a23f-10b32a39390b",
   "metadata": {},
   "source": [
    "### **Experiments** "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6438cb96-120c-46d0-88ae-f6f64de8f770",
   "metadata": {},
   "source": [
    "- Import all specific libraries and modules that can provide the necessary tools and functions to efficently accomplish tasks."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "96738fdc",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "#import tensorflow_addons as tfa\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import accuracy_score\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.optimizers import Adam, RMSprop\n",
    "from tensorflow.keras.preprocessing.text import Tokenizer\n",
    "from tensorflow.keras.preprocessing.sequence import pad_sequences\n",
    "from tensorflow.keras.layers import Dense, Dropout, Embedding, LSTM, BatchNormalization\n",
    "from tensorflow.keras.preprocessing.text import Tokenizer\n",
    "from tensorflow.keras.callbacks import EarlyStopping"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1d16225c-efe2-416f-adf3-4fc541f6d2f0",
   "metadata": {},
   "source": [
    "- The inputs of the model:\n",
    "\n",
    "  Read the training data from the .csv file and the testing data from the .xlsv file. The training dataset is derived from CSV files and consists of comment text, author's name, comment date, video ID and category labels (0 for non-spam comments and 1 for spam comments). In this project, only two columns of data are actually useful for training and testing the model, namely the \"CLASS\" and \"TEXT\". This means that when I need to read and extract data from the two files, I only need to consider the aforementioned two columns.\n",
    "\n",
    "  Therefore, we have:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "5ed5d0b1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# read the train .csv file and just take two useful col TEXT & CLASS\n",
    "def read_csv_file(file_path):\n",
    "    data = pd.read_csv(file_path)\n",
    "    text = data['TEXT']\n",
    "    labels = data['CLASS']\n",
    "    return text, labels\n",
    "\n",
    "# read the train .xlsv file and just take two useful col TEXT & CLASS\n",
    "def read_xlsv_file(file_path):\n",
    "    data = pd.read_excel(file_path)\n",
    "    text = data['TEXT']\n",
    "    labels = data['CLASS']\n",
    "    return text, labels"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "84239ab7-0c0a-438d-8bb6-aba60206a718",
   "metadata": {},
   "source": [
    "- For the training part, this function **train_model_Adam(text, labels, num_epochs)** is to build and trains a text classification model using Adam optimizer.\n",
    "\n",
    "  1. **Tokenize the text data**: The first part, `Tokenizer()` converts text data into sequences of integers, and each integer represents a specific word from the dataset.\n",
    "     \n",
    "  2. **Padding sequences to have the same length**: The padding part is used to ensure all text sequences have the same length (Using `maxlen=max_sequence_length` to make every text sequence have the same length, which is equal to the maximum length of all text comments). This part is important because most deep learning models require input data of consistent size.\n",
    " \n",
    "  3. **Splitting into training and testing sets**:\n",
    "     - To divide the data into training and testing sets, I chose `train_size=0.8`, which selects 80% of the data for training and the remaining data for testing. There are multiple benefits to selecting a larger `train_size`. More training data enhances the model's ability to discern intricate patterns, boosting its overall accuracy. It also mitigates the risk of overfitting, ensuring that the model generalizes well to unseen data rather than merely memorizing the training examples. Additionally, a larger dataset enhances the model's robustness by encompassing a wider variety of real-world scenarios, which improves its practical applicability. Moreover, a substantial training set increases statistical reliability, lending more credibility to the model's predictions.\n",
    "     - Setting `random_state=42` guarantees that the split is consistent, ensuring that the same data points are allocated to the training and test sets in each run.\n",
    "\n",
    "  4. **Model Architecture**:\n",
    "     - `Embedding`: Converts integer sequences into dense vectors of fixed size.\r\n",
    "       - `input_dim=len(tokenizer.word_index) + 1`: The input dimension is set to the number of unique words + 1 (for the padding zero).\r\n",
    "       - `output_dim=100`: Each word is represented by a vector of length 100.\r\n",
    "       - `input_length=max_sequence_length`: Each input sequence will have this fixed length.\r\n",
    "     - `BatchNormalization`: Normalizes the activations of the previous layer, which helps in speeding up training and reducing overfitting.\r\n",
    "     - `LSTM(128)`: A Long Short-Term Memory layer with 128 units to process sequences.\r\n",
    "     - `Dropout(0.5)`: Randomly sets input units to 0 with a frequency of 50% at each step during training time, which helps to prevent overfitting.\r\n",
    "     - `Dense(1, activation='sigmoid')`: Outputs a single value between 0 and 1, representing the probability of the target class (binary classific\n",
    "\n",
    "\n",
    "    5. **Model Compilation**: I chose `Adam` as the optimizer and its `learning_rate` is equal to `0.0001`. A relatively small learning rate is selected to enable the model to learn incrementally, ensuring it doesn't overlook minima on the loss surface. To choose the `loss`, `binary_crossentropy` is the most suitable for binary classification tasks.\n",
    "\n",
    "\n",
    "    6. **Training**: Using the fit method to train the model\n",
    "       - `batch_size=32`: Number of samples per gradient update. Common sizes are 32, 64, and 128. Because there are not too many samples, 32 size is enough.\r",
    "        - `epochs=num_epochs`: Allows flexibility to set the number of training epochs externally.\r\n",
    "       - `verbose=1`: Shows a progress bar during training.\r\n",
    "       - `validation_split=0.2`: Uses 20% of the training data as validation data.\r\n",
    "       - `callbacks=[early_stopping]`: Stops training when the validation loss has not improved for 10 epochs (`patience=10`) and restores model weights from the epoch with the best value of the monitored quantity (`restore_best_weights=Tru\n",
    "\n",
    "In the end, the trained `loss` and `training set accuracy` data is printed and returned to the `model`, `tokenizer`, and training `history`.`).\r\n",
    "tion). "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "eab2bc79",
   "metadata": {},
   "outputs": [],
   "source": [
    "def train_model_Adam(text, labels, num_epochs):\n",
    "    # Tokenize the text data\n",
    "    tokenizer = Tokenizer()\n",
    "    tokenizer.fit_on_texts(text)\n",
    "    sequences = tokenizer.texts_to_sequences(text)\n",
    "\n",
    "    # Padding sequences to have the same length\n",
    "    max_sequence_length = max([len(seq) for seq in sequences])\n",
    "    padded_sequences = pad_sequences(sequences, maxlen=max_sequence_length)\n",
    "\n",
    "    # Splitting into training and testing sets\n",
    "    X_train, X_test, y_train, y_test = train_test_split(padded_sequences, labels, train_size=0.8, random_state=42)\n",
    "\n",
    "    # Model architecture\n",
    "    model = Sequential()\n",
    "    model.add(Embedding(input_dim=len(tokenizer.word_index) + 1, output_dim=100, input_length=max_sequence_length))\n",
    "    model.add(BatchNormalization())\n",
    "    model.add(LSTM(128))\n",
    "    model.add(Dropout(0.5))\n",
    "    model.add(Dense(1, activation='sigmoid'))\n",
    "\n",
    "    # Compile the model\n",
    "    optimizer = Adam(learning_rate=0.0001)\n",
    "    model.compile(loss='binary_crossentropy', optimizer=optimizer, metrics=['accuracy'])\n",
    "\n",
    "\n",
    "    #history = model.fit(X_train, y_train, batch_size=32, epochs=num_epochs, verbose=1)\n",
    "    early_stopping = EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True)\n",
    "\n",
    "    history = model.fit(X_train, y_train, batch_size=32, epochs=num_epochs, verbose=1, validation_split=0.2, callbacks=[early_stopping])\n",
    "    evaluation = model.evaluate(X_test, y_test)\n",
    "    \n",
    "    print(\"Test set loss:\", evaluation[0])\n",
    "    print(\"Training set accuracy:\", evaluation[1])\n",
    "\n",
    "    return model, tokenizer, history"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2dfdb4d1-eefb-479d-8e30-bddbccf3207d",
   "metadata": {},
   "source": [
    "- This function **test_model(model, text, labels, tokenizer)** is designed to evaluate the performance of a pre-trained model by calculating its accuracy on a test dataset.\n",
    "  \n",
    "  1. **Tokenize the text data**:\n",
    "     - `texts_to_sequences(text)`: Converts the list of text data into sequences of integers.\r\n",
    "     - `pad_sequences(sequences, maxlen=model.input_shape[1])`:This process ensures uniformity in sequence length by padding the shorter ones, a critical step because neural networks need inputs of the same size. The parameter `maxlen=model.input_shape[1]` defines the maximum sequence length according to the model’s input dimensions, ensuring consistent input sizes and avoiding dimensional mismatches during prediction.\n",
    "\n",
    "  2. **Making predictions**:\n",
    "     - `model.predict(padded_sequences)`: Generates output predictions for the input sequences.\r\n",
    "     - `(predictions > 0.5).astype(int).flatten()`: Converts the probabilities returned by the model to binary labels (0 or 1). This is typical for binary classification tasks where a threshold of 0.5 is used to decide the class labels\n",
    "     -  `accuracy_score(labels, y_pred)`: Calculate the accuracy.\n",
    "    \n",
    "  3. **Creating a comparison Table**: `pd.DataFrame()` is to create a table which shows the text from the testing dataset, the predicted labels and the actual labels. This is helpful for manually reviewing whether the prediction cases are correct or not..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "a11334c7",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Testing the trained model and calculating accuracy\n",
    "def test_model(model, text, labels, tokenizer):\n",
    "    # Tokenize the text data\n",
    "    sequences = tokenizer.texts_to_sequences(text)\n",
    "    padded_sequences = pad_sequences(sequences, maxlen=model.input_shape[1])\n",
    "\n",
    "    # Making predictions using the model\n",
    "    predictions = model.predict(padded_sequences)\n",
    "    y_pred = (predictions > 0.5).astype(int).flatten()\n",
    "    accuracy = accuracy_score(labels, y_pred)\n",
    "    print(\"Testing set accuracy:\", accuracy)\n",
    "\n",
    "    # Create a table to compare the actual CLASS col and the predicted CLASS col\n",
    "    df = pd.DataFrame({'Text': text, 'Predicted Label': y_pred, 'Actual Label': labels})\n",
    "    print(df)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e0e0eaa9-0315-4529-bb72-ff02c1e64232",
   "metadata": {},
   "source": [
    "- This function is used to generate a chart that displays the relationship between Loss and Epochs."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "139bfc02",
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_loss(history):\n",
    "    # Get the loss values from training history\n",
    "    loss = history.history['loss']\n",
    "\n",
    "    # Create a list of epochs\n",
    "    epochs = range(1, len(loss) + 1)\n",
    "\n",
    "    # Plot the loss values\n",
    "    plt.plot(epochs, loss, 'b', label='Training loss')\n",
    "    plt.title('Training Loss')\n",
    "    plt.xlabel('Epochs')\n",
    "    plt.ylabel('Loss')\n",
    "    plt.legend()\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d1a8a4e-7dcf-47dc-ad8d-7a08e756e08d",
   "metadata": {},
   "source": [
    "### Result of Experiments"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6e81ea2a-1c76-4122-9535-294dd3fcb9f5",
   "metadata": {},
   "source": [
    "Before I execute the program, based on what the model already does plus a variety of factors, and assuming that the large amount of data on the .csv archive is accurate enough and that there are valid features for each piece of text, I believe that with enough epochs, the accuracy of the prediction can reach at least 70% or more, and can stabilise at 85% or more."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7fec8fed-3cab-44fc-a23f-dc06af2f0f76",
   "metadata": {},
   "source": [
    "- Read and get the training data (`TEXT` and `CLASS`) from `Topic1-youtube_spam_train.csv`, and set the `num_epochs` as 100 (can be changed to another larger integer). Then execute `train_model_Adam`; there is a process of every epoch which is displayed under the code."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "5476c3c0",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/100\n",
      "16/16 [==============================] - 6s 180ms/step - loss: 0.6839 - accuracy: 0.5980 - val_loss: 0.6896 - val_accuracy: 0.5000\n",
      "Epoch 2/100\n",
      "16/16 [==============================] - 2s 139ms/step - loss: 0.6309 - accuracy: 0.6529 - val_loss: 0.6886 - val_accuracy: 0.4609\n",
      "Epoch 3/100\n",
      "16/16 [==============================] - 2s 142ms/step - loss: 0.5837 - accuracy: 0.7098 - val_loss: 0.6849 - val_accuracy: 0.5156\n",
      "Epoch 4/100\n",
      "16/16 [==============================] - 2s 143ms/step - loss: 0.5162 - accuracy: 0.7784 - val_loss: 0.6824 - val_accuracy: 0.5156\n",
      "Epoch 5/100\n",
      "16/16 [==============================] - 2s 145ms/step - loss: 0.4300 - accuracy: 0.8569 - val_loss: 0.6779 - val_accuracy: 0.5547\n",
      "Epoch 6/100\n",
      "16/16 [==============================] - 2s 147ms/step - loss: 0.3465 - accuracy: 0.9020 - val_loss: 0.6706 - val_accuracy: 0.6172\n",
      "Epoch 7/100\n",
      "16/16 [==============================] - 2s 152ms/step - loss: 0.2467 - accuracy: 0.9529 - val_loss: 0.6609 - val_accuracy: 0.6172\n",
      "Epoch 8/100\n",
      "16/16 [==============================] - 2s 148ms/step - loss: 0.1618 - accuracy: 0.9765 - val_loss: 0.6475 - val_accuracy: 0.6484\n",
      "Epoch 9/100\n",
      "16/16 [==============================] - 2s 147ms/step - loss: 0.1312 - accuracy: 0.9765 - val_loss: 0.6292 - val_accuracy: 0.7031\n",
      "Epoch 10/100\n",
      "16/16 [==============================] - 2s 151ms/step - loss: 0.1013 - accuracy: 0.9804 - val_loss: 0.6138 - val_accuracy: 0.7031\n",
      "Epoch 11/100\n",
      "16/16 [==============================] - 2s 149ms/step - loss: 0.0773 - accuracy: 0.9902 - val_loss: 0.5914 - val_accuracy: 0.7031\n",
      "Epoch 12/100\n",
      "16/16 [==============================] - 2s 150ms/step - loss: 0.0615 - accuracy: 0.9902 - val_loss: 0.5756 - val_accuracy: 0.6953\n",
      "Epoch 13/100\n",
      "16/16 [==============================] - 2s 148ms/step - loss: 0.0508 - accuracy: 0.9882 - val_loss: 0.5497 - val_accuracy: 0.7344\n",
      "Epoch 14/100\n",
      "16/16 [==============================] - 2s 150ms/step - loss: 0.0456 - accuracy: 0.9902 - val_loss: 0.5291 - val_accuracy: 0.7422\n",
      "Epoch 15/100\n",
      "16/16 [==============================] - 2s 150ms/step - loss: 0.0392 - accuracy: 0.9922 - val_loss: 0.5090 - val_accuracy: 0.7500\n",
      "Epoch 16/100\n",
      "16/16 [==============================] - 2s 151ms/step - loss: 0.0337 - accuracy: 0.9980 - val_loss: 0.4962 - val_accuracy: 0.7500\n",
      "Epoch 17/100\n",
      "16/16 [==============================] - 2s 153ms/step - loss: 0.0287 - accuracy: 0.9941 - val_loss: 0.4788 - val_accuracy: 0.7578\n",
      "Epoch 18/100\n",
      "16/16 [==============================] - 2s 152ms/step - loss: 0.0238 - accuracy: 0.9980 - val_loss: 0.4648 - val_accuracy: 0.7656\n",
      "Epoch 19/100\n",
      "16/16 [==============================] - 2s 152ms/step - loss: 0.0219 - accuracy: 0.9961 - val_loss: 0.4524 - val_accuracy: 0.7812\n",
      "Epoch 20/100\n",
      "16/16 [==============================] - 2s 155ms/step - loss: 0.0221 - accuracy: 0.9980 - val_loss: 0.4433 - val_accuracy: 0.7812\n",
      "Epoch 21/100\n",
      "16/16 [==============================] - 2s 156ms/step - loss: 0.0740 - accuracy: 0.9804 - val_loss: 0.4524 - val_accuracy: 0.7969\n",
      "Epoch 22/100\n",
      "16/16 [==============================] - 2s 154ms/step - loss: 0.0375 - accuracy: 0.9941 - val_loss: 0.4297 - val_accuracy: 0.8203\n",
      "Epoch 23/100\n",
      "16/16 [==============================] - 2s 153ms/step - loss: 0.0257 - accuracy: 0.9941 - val_loss: 0.3847 - val_accuracy: 0.8750\n",
      "Epoch 24/100\n",
      "16/16 [==============================] - 2s 155ms/step - loss: 0.0183 - accuracy: 0.9980 - val_loss: 0.3853 - val_accuracy: 0.8906\n",
      "Epoch 25/100\n",
      "16/16 [==============================] - 2s 157ms/step - loss: 0.0168 - accuracy: 0.9980 - val_loss: 0.3810 - val_accuracy: 0.8984\n",
      "Epoch 26/100\n",
      "16/16 [==============================] - 2s 156ms/step - loss: 0.0146 - accuracy: 1.0000 - val_loss: 0.3738 - val_accuracy: 0.9141\n",
      "Epoch 27/100\n",
      "16/16 [==============================] - 2s 155ms/step - loss: 0.0123 - accuracy: 1.0000 - val_loss: 0.3656 - val_accuracy: 0.9219\n",
      "Epoch 28/100\n",
      "16/16 [==============================] - 2s 152ms/step - loss: 0.0119 - accuracy: 1.0000 - val_loss: 0.3577 - val_accuracy: 0.9219\n",
      "Epoch 29/100\n",
      "16/16 [==============================] - 2s 154ms/step - loss: 0.0119 - accuracy: 1.0000 - val_loss: 0.3481 - val_accuracy: 0.9141\n",
      "Epoch 30/100\n",
      "16/16 [==============================] - 2s 155ms/step - loss: 0.0114 - accuracy: 1.0000 - val_loss: 0.3417 - val_accuracy: 0.9141\n",
      "Epoch 31/100\n",
      "16/16 [==============================] - 2s 154ms/step - loss: 0.0104 - accuracy: 1.0000 - val_loss: 0.3390 - val_accuracy: 0.9219\n",
      "Epoch 32/100\n",
      "16/16 [==============================] - 2s 155ms/step - loss: 0.0095 - accuracy: 1.0000 - val_loss: 0.3351 - val_accuracy: 0.9219\n",
      "Epoch 33/100\n",
      "16/16 [==============================] - 2s 155ms/step - loss: 0.0092 - accuracy: 0.9980 - val_loss: 0.3329 - val_accuracy: 0.9219\n",
      "Epoch 34/100\n",
      "16/16 [==============================] - 2s 154ms/step - loss: 0.0085 - accuracy: 1.0000 - val_loss: 0.3319 - val_accuracy: 0.9219\n",
      "Epoch 35/100\n",
      "16/16 [==============================] - 2s 154ms/step - loss: 0.0068 - accuracy: 1.0000 - val_loss: 0.3295 - val_accuracy: 0.9219\n",
      "Epoch 36/100\n",
      "16/16 [==============================] - 2s 155ms/step - loss: 0.0074 - accuracy: 1.0000 - val_loss: 0.3317 - val_accuracy: 0.9219\n",
      "Epoch 37/100\n",
      "16/16 [==============================] - 2s 156ms/step - loss: 0.0064 - accuracy: 1.0000 - val_loss: 0.3333 - val_accuracy: 0.9297\n",
      "Epoch 38/100\n",
      "16/16 [==============================] - 2s 154ms/step - loss: 0.0076 - accuracy: 1.0000 - val_loss: 0.3351 - val_accuracy: 0.9219\n",
      "Epoch 39/100\n",
      "16/16 [==============================] - 2s 153ms/step - loss: 0.0062 - accuracy: 1.0000 - val_loss: 0.3323 - val_accuracy: 0.9141\n",
      "Epoch 40/100\n",
      "16/16 [==============================] - 2s 154ms/step - loss: 0.0054 - accuracy: 1.0000 - val_loss: 0.3267 - val_accuracy: 0.9141\n",
      "Epoch 41/100\n",
      "16/16 [==============================] - 2s 152ms/step - loss: 0.0051 - accuracy: 1.0000 - val_loss: 0.3275 - val_accuracy: 0.9219\n",
      "Epoch 42/100\n",
      "16/16 [==============================] - 2s 153ms/step - loss: 0.0048 - accuracy: 1.0000 - val_loss: 0.3306 - val_accuracy: 0.9219\n",
      "Epoch 43/100\n",
      "16/16 [==============================] - 3s 164ms/step - loss: 0.0045 - accuracy: 1.0000 - val_loss: 0.3370 - val_accuracy: 0.9219\n",
      "Epoch 44/100\n",
      "16/16 [==============================] - 2s 156ms/step - loss: 0.0047 - accuracy: 1.0000 - val_loss: 0.3407 - val_accuracy: 0.9219\n",
      "Epoch 45/100\n",
      "16/16 [==============================] - 2s 156ms/step - loss: 0.0049 - accuracy: 1.0000 - val_loss: 0.3450 - val_accuracy: 0.9141\n",
      "Epoch 46/100\n",
      "16/16 [==============================] - 2s 153ms/step - loss: 0.0039 - accuracy: 1.0000 - val_loss: 0.3522 - val_accuracy: 0.9219\n",
      "Epoch 47/100\n",
      "16/16 [==============================] - 2s 153ms/step - loss: 0.0041 - accuracy: 1.0000 - val_loss: 0.3588 - val_accuracy: 0.9141\n",
      "Epoch 48/100\n",
      "16/16 [==============================] - 2s 154ms/step - loss: 0.0037 - accuracy: 1.0000 - val_loss: 0.3654 - val_accuracy: 0.9141\n",
      "Epoch 49/100\n",
      "16/16 [==============================] - 2s 157ms/step - loss: 0.0045 - accuracy: 1.0000 - val_loss: 0.3647 - val_accuracy: 0.9141\n",
      "Epoch 50/100\n",
      "16/16 [==============================] - 2s 154ms/step - loss: 0.0033 - accuracy: 1.0000 - val_loss: 0.3690 - val_accuracy: 0.9141\n",
      "5/5 [==============================] - 0s 68ms/step - loss: 0.2055 - accuracy: 0.9125\n",
      "Test set loss: 0.20549964904785156\n",
      "Training set accuracy: 0.9125000238418579\n"
     ]
    }
   ],
   "source": [
    "train_text, train_labels = read_csv_file(\"./Topic_3_Data/Topic1-youtube_spam_train.csv\")\n",
    "\n",
    "num_epochs = 100  \n",
    "\n",
    "model, tokenizer, history = train_model_Adam(train_text, train_labels, num_epochs)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85eaf99e-d951-407a-9a79-6894b90d5380",
   "metadata": {},
   "source": [
    "The training process is stopped at **50** ecophs and its training set accuracy is about 91.3%."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aab8e623-8609-434a-bda8-c22e096f5f08",
   "metadata": {},
   "source": [
    "#### Chart of Training Loss\n",
    "\n",
    "Now let's see the chart of training loss. I used the `plot_loss(history)` function to display it.\n",
    "\n",
    "- The chart of **Training Loss**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "78390fca",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot the loss values\n",
    "plot_loss(history)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8b4ec503-7355-4be3-819c-ca4ff1dd14a1",
   "metadata": {},
   "source": [
    "To summarise, the loss decreases gradually with increasing epoch and there is no significant rebound, which is a sign of a good training process, indicating that the model is gradually learning and improving its prediction accuracy. This relies on sound model design, appropriate choice of optimisation algorithm, proper learning rate setting and effective data processing strategy. It means that the model I designed meets the criteria I envisioned."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "60d4509f-978f-4997-9938-b8dcd6e6e571",
   "metadata": {},
   "source": [
    "#### Testing the model\n",
    "\n",
    "- Read the testing data from .xlsv file, also just read and get two columns data from the file (`Text` and `CLASS`):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "afa8704b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "7/7 [==============================] - 1s 71ms/step\n",
      "Testing set accuracy: 0.9455445544554455\n",
      "                                                  Text  Predicted Label  \\\n",
      "0    Is this the video that started the whole \"got ...                0   \n",
      "1                  Can anyone sub to my channel? :Dï»¿                1   \n",
      "2                        prehistoric song..has beenï»¿                0   \n",
      "3    You think you're smart?        Headbutt your f...                0   \n",
      "4    DISLIKE.. Now one knows REAL music - ex. Enime...                0   \n",
      "..                                                 ...              ...   \n",
      "197                Check out this video on YouTube:ï»¿                1   \n",
      "198                Check out this video on YouTube:ï»¿                1   \n",
      "199                Check out this video on YouTube:ï»¿                1   \n",
      "200                Check out this video on YouTube:ï»¿                1   \n",
      "201  ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸ...                0   \n",
      "\n",
      "     Actual Label  \n",
      "0               0  \n",
      "1               1  \n",
      "2               0  \n",
      "3               0  \n",
      "4               0  \n",
      "..            ...  \n",
      "197             1  \n",
      "198             1  \n",
      "199             1  \n",
      "200             1  \n",
      "201             1  \n",
      "\n",
      "[202 rows x 3 columns]\n"
     ]
    }
   ],
   "source": [
    "test_text, test_labels = read_xlsv_file(\"./Topic_3_Data/Topic1-youtube_spam_test.xlsx\")\n",
    "\n",
    "test_model(model, test_text, test_labels, tokenizer)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6837424d-d8e7-4127-a191-fca9ea873f19",
   "metadata": {},
   "source": [
    "\n",
    "We can see that the accuracy is about **94.6%**. A model test accuracy of over 90 per cent indicates that it performs well in understanding and classifying the test data, effectively identifying and predicting patterns and trends in the data. This usually means that the model has good generalisation capabilities."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a90dae4b-3017-4b6d-9852-2a690655a441",
   "metadata": {},
   "source": [
    "#### Get the relationship between epochs and accuracy of the model.\n",
    "\n",
    "- Since the number of epochs during model training is not fixed, and the resulting accuracy is not fixed either, I tried running the same code multiple times (repeating the execution of **train_model_Adam()**) to obtain multiple results.\n",
    "  \n",
    "  1. This is the accuracy of the training set and testing set to the model which is stopped at the 43rd epoch:\n",
    "     ![stop at 43rd](./Topic_3_Data/Training_stop_at_43_epoch.jpg)\n",
    "     ![stop at 43rd](./Topic_3_Data/Adam_Testing_result_43_epoches.jpg)\n",
    "\n",
    "  2. This is the accuracy of the training set and testing set to the model which is stopped at the 53rd epoch:\n",
    "     ![stop at 53rd](./Topic_3_Data/Training_stop_at_53_epoch.jpg)\n",
    "     ![stop at 53rd](./Topic_3_Data/Adam_Testing_result_53_epoches.jpg)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0a7af5d9-0c4a-45c9-b401-208d85c16e7c",
   "metadata": {},
   "source": [
    "Look at these images. We can find a rule:  The accuracy obtained from either **Training** or **Testing** is deeply related to how many epochs were performed during training. Usually, the more epochs are run when training a model, the higher the accuracy will be get!"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2d1ceed7-646e-4532-98f0-f9270c3ed6a4",
   "metadata": {},
   "source": [
    "### Conclusion"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "79a4ac4d-e3f3-4b41-a4b4-84268741cce3",
   "metadata": {},
   "source": [
    "This project successfully illustrates the construction and training of neural networks for text classification, tackling prevalent issues like overfitting with strategies including dropout and early stopping. Tokenization and padding are employed to standardize the input data, whereas LSTM layers are utilized to capture dependencies within sequential data. Overall, the project establishes a comprehensive pipeline from data ingestion and preprocessing to the training, evaluation, and application of neural networks for practical text classification scenarios."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.18"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
